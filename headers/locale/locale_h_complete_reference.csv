Type,Name,Syntax,Parameters,Return_Type,Return_Value,Description,Usage,Example_Code,Output_Example
Function,setlocale,"char *setlocale(int category, const char *locale)","int category: Category to set/query (LC_ALL, LC_COLLATE, etc.); const char *locale: Locale string or NULL",char *,"Pointer to string representing the locale on success, NULL on failure",Sets or queries the program's current locale settings,Used to change locale-specific formatting and behavior,"setlocale(LC_ALL, ""C""); // Set to C locale
setlocale(LC_NUMERIC, NULL); // Query numeric locale","Returns ""C"" for C locale, ""en_US.UTF-8"" for US English locale"
Function,localeconv,struct lconv *localeconv(void),None (void),struct lconv *,Pointer to lconv structure containing formatting information,Returns structure with numeric and monetary formatting rules for current locale,Access detailed locale-specific formatting information,"struct lconv *lc = localeconv();
printf(""Decimal point: %s\n"", lc->decimal_point);","Returns structure with decimal_point=""."", currency_symbol=""$"", etc."
Macro,LC_ALL,#define LC_ALL <integer constant>,N/A,int,Integer constant (implementation-defined),Affects all locale categories - sets entire locale of program,Used with setlocale() to set all categories at once,"setlocale(LC_ALL, ""en_US.UTF-8"");",Sets all locale categories to US English
Macro,LC_COLLATE,#define LC_COLLATE <integer constant>,N/A,int,Integer constant (implementation-defined),Affects string collation functions strcoll() and strxfrm(),Controls string comparison and sorting behavior,"setlocale(LC_COLLATE, ""de_DE"");",Sets German collation rules for string comparison
Macro,LC_CTYPE,#define LC_CTYPE <integer constant>,N/A,int,Integer constant (implementation-defined),Affects character classification and conversion functions,"Controls behavior of character handling functions like isalpha(), tolower()","setlocale(LC_CTYPE, ""fr_FR"");",Sets French character classification rules
Macro,LC_MONETARY,#define LC_MONETARY <integer constant>,N/A,int,Integer constant (implementation-defined),Affects monetary information returned by localeconv(),Controls currency formatting and monetary display,"setlocale(LC_MONETARY, ""en_GB"");",Sets British pound currency formatting
Macro,LC_NUMERIC,#define LC_NUMERIC <integer constant>,N/A,int,Integer constant (implementation-defined),Affects decimal-point character and numeric formatting,"Controls numeric display in printf(), scanf(), and localeconv()","setlocale(LC_NUMERIC, ""de_DE"");",Sets German numeric formatting (comma as decimal separator)
Macro,LC_TIME,#define LC_TIME <integer constant>,N/A,int,Integer constant (implementation-defined),Affects time and date formatting with strftime(),Controls date/time display format,"setlocale(LC_TIME, ""ja_JP"");",Sets Japanese date/time formatting
Macro,NULL,#define NULL <null pointer constant>,N/A,void *,"Null pointer (0, 0L, or (void*)0)",Null pointer constant defined in multiple headers including locale.h,Used to represent null pointers and query current locale,"char *current = setlocale(LC_ALL, NULL);",Queries current locale without changing it
Structure,struct lconv,struct lconv { /* members listed below */ },Structure with multiple members for formatting,struct lconv,Structure containing formatting information,Structure containing numeric and monetary formatting rules,Returned by localeconv() to access formatting details,struct lconv *lc = localeconv();,Structure with formatting information for current locale
Structure Member,decimal_point,char *decimal_point,N/A (structure member),char *,String containing decimal point character,Decimal point character for non-monetary values,Used in numeric formatting,"printf(""Decimal: %s\n"", lc->decimal_point);","""."" in C locale, "","" in German locale"
Structure Member,thousands_sep,char *thousands_sep,N/A (structure member),char *,String containing thousands separator character,Character used to separate groups of digits,Used in numeric formatting for large numbers,"printf(""Thousands sep: %s\n"", lc->thousands_sep);",""""" (empty) in C locale, "","" in US locale"
Structure Member,grouping,char *grouping,N/A (structure member),char *,String indicating digit grouping pattern,String indicating size of digit groups in non-monetary values,"Defines how digits are grouped (e.g., thousands)","printf(""Grouping: %s\n"", lc->grouping);",""""" (no grouping) in C locale, ""\3"" for groups of 3"
Structure Member,int_curr_symbol,char *int_curr_symbol,N/A (structure member),char *,String with international currency symbol,International currency symbol (ISO 4217) plus separator,Used for international monetary formatting,"printf(""Int currency: %s\n"", lc->int_curr_symbol);","""USD "" for US dollar, ""EUR "" for Euro"
Structure Member,currency_symbol,char *currency_symbol,N/A (structure member),char *,String with local currency symbol,Local currency symbol for current locale,Used for local monetary formatting,"printf(""Currency: %s\n"", lc->currency_symbol);","""$"" for US dollar, ""â‚¬"" for Euro"
Structure Member,mon_decimal_point,char *mon_decimal_point,N/A (structure member),char *,String with monetary decimal point,Decimal point character used in monetary values,Used in monetary formatting,"printf(""Mon decimal: %s\n"", lc->mon_decimal_point);","""."" in most locales, "","" in some European locales"
Structure Member,mon_thousands_sep,char *mon_thousands_sep,N/A (structure member),char *,String with monetary thousands separator,Thousands separator character for monetary values,Used in monetary formatting for large amounts,"printf(""Mon thousands: %s\n"", lc->mon_thousands_sep);",""","" in US locale, "" "" (space) in some locales"
Structure Member,mon_grouping,char *mon_grouping,N/A (structure member),char *,String indicating monetary grouping pattern,String indicating size of digit groups in monetary values,Defines how monetary digits are grouped,"printf(""Mon grouping: %s\n"", lc->mon_grouping);","""\3"" for groups of 3 digits"
Structure Member,positive_sign,char *positive_sign,N/A (structure member),char *,String with positive sign for monetary values,String used to indicate positive monetary values,Used in monetary formatting,"printf(""Positive sign: %s\n"", lc->positive_sign);",""""" (empty) in most locales, ""+"" in some"
Structure Member,negative_sign,char *negative_sign,N/A (structure member),char *,String with negative sign for monetary values,String used to indicate negative monetary values,Used in monetary formatting,"printf(""Negative sign: %s\n"", lc->negative_sign);","""-"" in most locales"
Structure Member,int_frac_digits,char int_frac_digits,N/A (structure member),char,Number of fractional digits for international currency,Number of fractional digits for international monetary formatting,Defines precision in international monetary display,"printf(""Int frac digits: %d\n"", lc->int_frac_digits);","2 for most currencies (cents), CHAR_MAX if not available"
Structure Member,frac_digits,char frac_digits,N/A (structure member),char,Number of fractional digits for local currency,Number of fractional digits for local monetary formatting,Defines precision in local monetary display,"printf(""Frac digits: %d\n"", lc->frac_digits);","2 for dollars (cents), 0 for yen, CHAR_MAX if not available"
Structure Member,p_cs_precedes,char p_cs_precedes,N/A (structure member),char,"1 if currency symbol precedes, 0 if follows positive values",Indicates if currency symbol precedes positive monetary values,Controls currency symbol position in positive amounts,"printf(""Currency precedes positive: %d\n"", lc->p_cs_precedes);","1 for ""$100"" format, 0 for ""100$"" format"
Structure Member,p_sep_by_space,char p_sep_by_space,N/A (structure member),char,"1 if space separates currency from positive value, 0 if not",Indicates if space separates currency symbol from positive values,Controls spacing in positive monetary formatting,"printf(""Space separates positive: %d\n"", lc->p_sep_by_space);","0 for ""$100"", 1 for ""$ 100"""
Structure Member,n_cs_precedes,char n_cs_precedes,N/A (structure member),char,"1 if currency symbol precedes, 0 if follows negative values",Indicates if currency symbol precedes negative monetary values,Controls currency symbol position in negative amounts,"printf(""Currency precedes negative: %d\n"", lc->n_cs_precedes);","1 for ""-$100"" format, 0 for ""-100$"" format"
Structure Member,n_sep_by_space,char n_sep_by_space,N/A (structure member),char,"1 if space separates currency from negative value, 0 if not",Indicates if space separates currency symbol from negative values,Controls spacing in negative monetary formatting,"printf(""Space separates negative: %d\n"", lc->n_sep_by_space);","0 for ""-$100"", 1 for ""-$ 100"""
Structure Member,p_sign_posn,char p_sign_posn,N/A (structure member),char,Position of positive sign (0-4),Indicates position of positive sign in monetary values,Controls positive sign placement in monetary formatting,"printf(""Positive sign position: %d\n"", lc->p_sign_posn);","0: parentheses, 1: before value, 2: after value, 3: before currency, 4: after currency"
Structure Member,n_sign_posn,char n_sign_posn,N/A (structure member),char,Position of negative sign (0-4),Indicates position of negative sign in monetary values,Controls negative sign placement in monetary formatting,"printf(""Negative sign position: %d\n"", lc->n_sign_posn);","0: parentheses, 1: before value, 2: after value, 3: before currency, 4: after currency"
